@using static LibraryManagement.Entities.ViewModel.Constant;
@model LibraryManagement.Entities.ViewModel.ViewBook ;
@{
    var GenereType = from Genere e in Enum.GetValues(typeof(Genere))
                      select new
                      {
                          ID = (int)e,
                          Name = e.ToString()
                      };
}
<div class="modal-header  bg-theme text-white">
    <h1 class="modal-title fs-5" id="exampleModalLabel">Book Form</h1>
    <button type="button" class="btn btn-transparent btn-icon btn-lg text-light" data-bs-dismiss="modal" aria-label="Close">
        <i class="fa fa-close"></i>
    </button>
</div>
<div class=" modal-body container-fluid">
    <form id="formAddEditSave_UMS" data-ajax="true" data-ajax-method="post" 
          data-ajax-success="OnSuccess(this.id,data, status, xhr);" data-ajax-failure="OnFailure(xhr, status, error);"
          asp-action="_BookPost" asp-controller="Home" class="row needs-validation " novalidate>
        
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Bookid" />
        <div class="row " >
            <div class="col-md-6" >
                <div class="form-s-control w-100 mt-3">
                    <input asp-for="Bookname" required placeholder=" " class="form-s-outline w-100" type="text">
                    <label class="form-s-label">Book Name </label>
                </div>
                <span asp-validation-for="Bookname" class="text-danger"></span>
                <div class="invalid-feedback">
                    Please select a valid region.
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-s-control w-100 mt-3">
                    <input asp-for="Author" required placeholder=" " class="form-s-outline w-100" type="text">
                    <label class="form-s-label">Author</label>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-s-control w-100 mt-3">
                    <input asp-for="BorrowerName" required placeholder=" " class="form-s-outline w-100" type="text">
                    <label class="form-s-label">Borrower Name</label>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-s-control w-100 mt-3">
                    <input placeholder="Date of Issue" required id="dateofissue" asp-for="Dateofissue" class="form-s-outline w-100" type="date">
                </div>
            </div>
            <div class="col-md-6">

                <div class="form-s-control w-100 mt-3 h-75">
                    <select class="form-s-outline form-select form-select-md h-100 p-2" required asp-for="Genere" asp-items="@(new SelectList(GenereType, "ID", "Name"))" data-allow-clear="true" aria-label="Default select example">
                        <option value="">Select Genere</option>
                    </select>
                    <label class="form-s-label">Genere</label>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-s-control w-100 mt-3">
					<input id="myInput" placeholder=" " asp-for="City" required class="form-s-outline w-100" type="text">
                    <label  class="form-s-label">City</label>
                </div>
                <input required type="text" />
            </div>

        </div>
        <div class="row mt-3">
            <div class="col-md-6">
                <button type="button" class="btn w-100 btn-outline-dark" data-bs-dismiss="modal">Cancel</button>
            </div>
            <div class="col-md-6">
                <input type="submit" value="Save" class="btn w-100 btn-primary text-white js-btn-modal-form-submit" data-check-before-submit="validateForm()" />
            </div>
        </div>
    </form>
</div>

<script>
    var today = new Date();
    var formattedDate = today.toISOString().split('T')[0];

    // Set the min attribute of the Start Date input to today's date
    document.getElementById('dateofissue').min = formattedDate;
    function validateForm() {
        // Implement your validation logic here
        var formIsValid = true; // Assume form is valid by default

        // Example: Validate form fields
        var inputs = document.querySelectorAll('inputs');
        inputs.forEach(function (input) {
            if (!input.value) {
                formIsValid = false;
            }
        });
        var textarea = document.querySelectorAll('#formAddEditSave_UMS textarea');
        textarea.forEach(function (input) {
            if (!input.value) {
                formIsValid = false;
            }
        });
        var select = document.querySelectorAll('#formAddEditSave_UMS select');
        select.forEach(function (input) {
            if (!input.value) {
                formIsValid = false;
            }
        });
        // Return validation result
        return formIsValid;
    }


    (function () {
        'use strict'

        var forms = document.querySelectorAll('.needs-validation')
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()

   
</script>
<script>
    function autocomplete(inp, arr) {
       
        var currentFocus;
        
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    b.addEventListener("click", function (e) {
                        inp.value = this.getElementsByTagName("input")[0].value;
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

	

	autocomplete(document.getElementById("myInput"), city);
</script>